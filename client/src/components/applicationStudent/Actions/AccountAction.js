import React, { useState } from 'react'
import { getUserToken } from '../../../components_login/Tokens.js';
import { BASE_URL } from '../../requests/URL.js';
import Upload from '../uploadSign/Upload.js';
import { useNavigate } from 'react-router-dom';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { TimePicker } from '@mui/x-date-pickers/TimePicker';

export default function AccountAction({ user, data }) {
    const navigate = useNavigate();

    const [grant, setGrant] = useState();
    const [payment, setPayment] = useState();
    const [remarks, setRemarks] = useState();
    const [disable, setDisable] = useState(false);
    const [action, setAction] = useState("Take Action");
    const [showModal, setShowModal] = useState(false);
    const [image, setImage] = useState(null);

    const getGrant = (e) => {
        setGrant(e.target.value);
    }

    const getPayment = (e) => {
        setPayment(e.target.value);
    }

    const getRemarks = (e) => {
        setRemarks(e.target.value);
    }

    function checks() {
        if (grant === null || payment === null) {
            window.alert("Please fill the all Field..");
            return false;
        }
        else return true;
    }

    const handleDisapprove = (e) => {
        e.preventDefault();
        if (!disable) {
            setDisable(true);
            setAction("Rejecting")
            updateStatus("-4");
        }
    }

    const handleApprove = (e) => {
        e.preventDefault();

        if (!disable) {
            setDisable(true);
            setAction("Approving")
            updateStatus("4");
        }
    }

    const updateStatus = async (status) => {
        if (!checks()) {
            return;
        }

        // if (image === null || image === undefined) {
        //     window.alert("Please upload your signature");
        //     setDisable(false)
        //     setAction("Take Action");
        //     return;
        // }

        const token = getUserToken();
        const formData = new FormData();

        formData.append("id", data._id);
        formData.append("status", status);
        formData.append("grantUtilized", grant);
        // formData.apend("balanceAvailable", user.balance);
        formData.append("passedForPayment", payment);
        formData.append("remarksAccount", remarks);
        formData.append("image", image);
        const user = JSON.parse(localStorage.getItem("loginuser"))
        formData.append("name", user.name);

        const res = await fetch(`${BASE_URL}/accountApproveOrDisapprove`, {
            method: "POST",
            headers: {
                "authorization": `Bearer ${token}`
            },
            body: formData
        })


        if (res.status === 200) {
            console.log("Successfull..")
            navigate('/accountLogin/studentApplication');
        }
        else {
            window.alert("Error Occurred! Try Again..")
        }
        setAction("Please Refresh the page..");
    }

    return (
        <>
            {showModal &&
                <div className='w-full items-center'>
                    <Upload setShowModal={setShowModal} setUploadImage={setImage} />
                </div>
            }
            {
                !showModal &&
                <>
                    <div className=" mt-2 bg-white shadow sm:rounded-lg">
                        <div className="px-4 py-2 sm:px-6">
                            <h3 className="flex justify-center items-center font-bold text-2xl leading-6 text-gray-900">Take Action</h3>
                        </div>

                        <div className="border-t border-gray-200">
                            <dl>
                                <div className="bg-gray-50 px-4 py-3 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                    <dt className="text-sm font-medium text-gray-500">Grant Utilized </dt>
                                    <dd className="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
                                        <input type="number" onChange={getGrant} placeholder="" className="block  mt-2 w-full placeholder-gray-400/70 dark:placeholder-gray-500 rounded-lg border border-blue-400 bg-white px-5 py-2.5 text-gray-700 focus:border-red-400 focus:outline-none focus:ring focus:ring-red-300 focus:ring-opacity-40 dark:border-red-400 dark:bg-gray-900 dark:text-gray-300 dark:focus:border-red-300" />
                                    </dd>
                                </div>
                                <div className="bg-gray-50 px-4 py-3 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                    <dt className="text-sm font-medium text-gray-500">Balance Available</dt>
                                    <dd className="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
                                        {user?.balance}
                                    </dd>
                                </div>
                                <div className="bg-gray-50 px-4 py-3 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                    <dt className="text-sm font-medium text-gray-500">Passed for payment of Rs.</dt>
                                    <dd className="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
                                        <input type="number" onChange={getPayment} placeholder="" className="block  mt-2 w-full placeholder-gray-400/70 dark:placeholder-gray-500 rounded-lg border border-blue-400 bg-white px-5 py-2.5 text-gray-700 focus:border-red-400 focus:outline-none focus:ring focus:ring-red-300 focus:ring-opacity-40 dark:border-red-400 dark:bg-gray-900 dark:text-gray-300 dark:focus:border-red-300" />
                                    </dd>
                                </div>


                                <div className="bg-gray-50 px-4 py-3 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                    <dt className="text-sm font-medium text-gray-500">Remarks</dt>
                                    <dd className="mt-1 text-sm text-gray-900 sm:mt-0">
                                        <textarea onChange={getRemarks} className="block  mt-2 w-auto  placeholder-gray-400/70 dark:placeholder-gray-500 rounded-lg border border-gray-200 bg-white px-4 h-32 py-2.5 text-gray-700 focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40 dark:border-gray-600 dark:bg-gray-900 dark:text-gray-300 dark:focus:border-blue-300" />
                                    </dd>
                                </div>
                            </dl>
                        </div >

                        {/* <div className="flex bg-gray-50 px-4 py-3 sm:grid sm:grid-cols-2 sm:gap-4 sm:px-6">
                            <dd className="flex flex-col justify-center items-center text-sm text-gray-900">
                                <button
                                    onClick={(e) => {
                                        e.preventDefault();
                                        setShowModal(true);
                                    }}
                                    className="flex items-center px-4 py-2 text-xl font-medium text-gray-600 transition-colors duration-200 sm:text-base sm:px-6 hover:bg-blue-400  dark:text-gray-800 gap-x-3 rounded-lg"
                                >
                                    Upload Signature
                                </button>
                            </dd>
                        </div > */}

                        {/* {image &&
                            <div className='p-3 '>
                                <p className='text-sm font-medium text-green-500'> Your Signature: </p>
                                <img src={image} alt=" " className="w-1/2 h-1/2" />
                            </div>
                        } */}
                        <br />
                    </div >

                    <br />
                    <div className="flex items-center bg-white border divide-x rounded-lg rtl:flex-row-reverse dark:bg-gray-900 dark:border-gray-700 dark:divide-gray-700">
                        <div className="flex items-center px-4 py-2 text-sm font-medium text-gray-600 transition-colors duration-200 sm:text-base sm:px-6 dark:hover:bg-gray-800 dark:text-gray-300 gap-x-3 hover:bg-gray-100">
                            {action}
                        </div>
                        <div className="flex flex-col sm:flex-row">
                            <button onClick={handleApprove} className="flex items-center px-4 py-2 text-sm font-medium text-gray-600 transition-colors duration-200 sm:text-base sm:px-6 dark:hover:bg-gray-800 dark:text-gray-300 gap-x-3 hover:bg-gray-100">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="w-5 h-5 sm:w-6 sm:h-6">
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M12 16.5V9.75m0 0l3 3m-3-3l-3 3M6.75 19.5a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z" />
                                </svg>
                                <span>Recommend</span>
                            </button>

                            <button onClick={handleDisapprove} className="flex items-center px-4 py-2 text-sm font-medium text-gray-600 transition-colors duration-200 sm:text-base sm:px-6 dark:hover:bg-gray-800 dark:text-gray-300 gap-x-3 hover:bg-gray-100">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="w-5 h-5 sm:w-6 sm:h-6">
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z" />
                                </svg>
                                <span>Not recommended</span>
                            </button>
                        </div>


                    </div>
                </>
            }
        </>
    )
}